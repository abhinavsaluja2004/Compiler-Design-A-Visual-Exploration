
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'statementsDIVIDE ELSE EQUAL EQUALS GREATER GREATEREQUAL ID IF INT LBRACE LESS LESSEQUAL LPAREN MINUS NOTEQUAL NUMBER PLUS RBRACE RPAREN SEMICOLON TIMESstatement : INT ID SEMICOLONstatement : ID EQUALS expression SEMICOLONexpression : expression PLUS term\n                  | expression MINUS termexpression : termterm : term TIMES factor\n            | term DIVIDE factorterm : factorfactor : NUMBERfactor : IDexpression : expression GREATER expression\n                  | expression LESS expression\n                  | expression GREATEREQUAL expression\n                  | expression LESSEQUAL expression\n                  | expression NOTEQUAL expression\n                  | expression EQUAL expressionstatement : IF expression statement ELSE statement\n                 | IF expression statementexpression : LPAREN expression RPARENstatement : LBRACE statements RBRACEstatements : statements statementstatements : statement'
    
_lr_action_items = {'INT':([0,1,2,6,7,10,11,13,14,15,16,17,19,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,],[3,3,-22,3,-21,3,-5,-8,-9,-10,3,-1,-18,-20,-2,3,-3,-4,-11,-12,-13,-14,-15,-16,-6,-7,-19,-17,]),'ID':([0,1,2,3,5,6,7,9,10,11,12,13,14,15,16,17,19,20,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,],[4,4,-22,8,15,4,-21,15,4,-5,15,-8,-9,-10,4,-1,-18,15,15,15,15,15,15,15,15,15,15,-20,-2,4,-3,-4,-11,-12,-13,-14,-15,-16,-6,-7,-19,-17,]),'IF':([0,1,2,6,7,10,11,13,14,15,16,17,19,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,],[5,5,-22,5,-21,5,-5,-8,-9,-10,5,-1,-18,-20,-2,5,-3,-4,-11,-12,-13,-14,-15,-16,-6,-7,-19,-17,]),'LBRACE':([0,1,2,6,7,10,11,13,14,15,16,17,19,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,],[6,6,-22,6,-21,6,-5,-8,-9,-10,6,-1,-18,-20,-2,6,-3,-4,-11,-12,-13,-14,-15,-16,-6,-7,-19,-17,]),'$end':([1,2,7,17,19,31,32,45,],[0,-22,-21,-1,-18,-20,-2,-17,]),'RBRACE':([2,7,16,17,19,31,32,45,],[-22,-21,31,-1,-18,-20,-2,-17,]),'EQUALS':([4,],[9,]),'LPAREN':([5,9,12,22,23,24,25,26,27,],[12,12,12,12,12,12,12,12,12,]),'NUMBER':([5,9,12,20,21,22,23,24,25,26,27,28,29,],[14,14,14,14,14,14,14,14,14,14,14,14,14,]),'SEMICOLON':([8,11,13,14,15,18,34,35,36,37,38,39,40,41,42,43,44,],[17,-5,-8,-9,-10,32,-3,-4,-11,-12,-13,-14,-15,-16,-6,-7,-19,]),'PLUS':([10,11,13,14,15,18,30,34,35,36,37,38,39,40,41,42,43,44,],[20,-5,-8,-9,-10,20,20,-3,-4,20,20,20,20,20,20,-6,-7,-19,]),'MINUS':([10,11,13,14,15,18,30,34,35,36,37,38,39,40,41,42,43,44,],[21,-5,-8,-9,-10,21,21,-3,-4,21,21,21,21,21,21,-6,-7,-19,]),'GREATER':([10,11,13,14,15,18,30,34,35,36,37,38,39,40,41,42,43,44,],[22,-5,-8,-9,-10,22,22,-3,-4,22,22,22,22,22,22,-6,-7,-19,]),'LESS':([10,11,13,14,15,18,30,34,35,36,37,38,39,40,41,42,43,44,],[23,-5,-8,-9,-10,23,23,-3,-4,23,23,23,23,23,23,-6,-7,-19,]),'GREATEREQUAL':([10,11,13,14,15,18,30,34,35,36,37,38,39,40,41,42,43,44,],[24,-5,-8,-9,-10,24,24,-3,-4,24,24,24,24,24,24,-6,-7,-19,]),'LESSEQUAL':([10,11,13,14,15,18,30,34,35,36,37,38,39,40,41,42,43,44,],[25,-5,-8,-9,-10,25,25,-3,-4,25,25,25,25,25,25,-6,-7,-19,]),'NOTEQUAL':([10,11,13,14,15,18,30,34,35,36,37,38,39,40,41,42,43,44,],[26,-5,-8,-9,-10,26,26,-3,-4,26,26,26,26,26,26,-6,-7,-19,]),'EQUAL':([10,11,13,14,15,18,30,34,35,36,37,38,39,40,41,42,43,44,],[27,-5,-8,-9,-10,27,27,-3,-4,27,27,27,27,27,27,-6,-7,-19,]),'RPAREN':([11,13,14,15,30,34,35,36,37,38,39,40,41,42,43,44,],[-5,-8,-9,-10,44,-3,-4,-11,-12,-13,-14,-15,-16,-6,-7,-19,]),'TIMES':([11,13,14,15,34,35,42,43,],[28,-8,-9,-10,28,28,-6,-7,]),'DIVIDE':([11,13,14,15,34,35,42,43,],[29,-8,-9,-10,29,29,-6,-7,]),'ELSE':([17,19,31,32,45,],[-1,33,-20,-2,-17,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statements':([0,6,],[1,16,]),'statement':([0,1,6,10,16,33,],[2,7,2,19,7,45,]),'expression':([5,9,12,22,23,24,25,26,27,],[10,18,30,36,37,38,39,40,41,]),'term':([5,9,12,20,21,22,23,24,25,26,27,],[11,11,11,34,35,11,11,11,11,11,11,]),'factor':([5,9,12,20,21,22,23,24,25,26,27,28,29,],[13,13,13,13,13,13,13,13,13,13,13,42,43,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statements","S'",1,None,None,None),
  ('statement -> INT ID SEMICOLON','statement',3,'p_statement_declare','parser.py',15),
  ('statement -> ID EQUALS expression SEMICOLON','statement',4,'p_statement_assign','parser.py',19),
  ('expression -> expression PLUS term','expression',3,'p_expression_binop','parser.py',23),
  ('expression -> expression MINUS term','expression',3,'p_expression_binop','parser.py',24),
  ('expression -> term','expression',1,'p_expression_term','parser.py',28),
  ('term -> term TIMES factor','term',3,'p_term_binop','parser.py',32),
  ('term -> term DIVIDE factor','term',3,'p_term_binop','parser.py',33),
  ('term -> factor','term',1,'p_term_factor','parser.py',37),
  ('factor -> NUMBER','factor',1,'p_factor_num','parser.py',41),
  ('factor -> ID','factor',1,'p_factor_id','parser.py',45),
  ('expression -> expression GREATER expression','expression',3,'p_expression_relop','parser.py',55),
  ('expression -> expression LESS expression','expression',3,'p_expression_relop','parser.py',56),
  ('expression -> expression GREATEREQUAL expression','expression',3,'p_expression_relop','parser.py',57),
  ('expression -> expression LESSEQUAL expression','expression',3,'p_expression_relop','parser.py',58),
  ('expression -> expression NOTEQUAL expression','expression',3,'p_expression_relop','parser.py',59),
  ('expression -> expression EQUAL expression','expression',3,'p_expression_relop','parser.py',60),
  ('statement -> IF expression statement ELSE statement','statement',5,'p_statement_if','parser.py',64),
  ('statement -> IF expression statement','statement',3,'p_statement_if','parser.py',65),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_paren','parser.py',74),
  ('statement -> LBRACE statements RBRACE','statement',3,'p_statement_block','parser.py',78),
  ('statements -> statements statement','statements',2,'p_statements_multiple','parser.py',82),
  ('statements -> statement','statements',1,'p_statements_single','parser.py',86),
]
